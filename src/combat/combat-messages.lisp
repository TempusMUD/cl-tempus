(in-package :tempus)

(defun load-messages ()
  nil)

(defun can-go (ch dir)
  (let ((exit (exit ch dir)))
    (and (not (null exit))
         (not (logtest (exit-info-of exit) (logior +ex-closed+ +ex-nopass+)))
         (not (null (to-room-of exit))))))

(defun death-cry (ch)
  (cond
    ((and (is-npc ch)
          (eql (func-of (shared-of ch)) 'fate))
     (act ch :all-emit "$n dissipates in a cloud of mystery, leaving you to your fate."))
    ((or (is-ghoul ch)
         (is-wight ch)
         (is-mummy ch))
     (act ch :all-emit "$n falls lifeless to the floor with a shriek."))
    ((is-skeleton ch)
     (act ch :all-emit "$n clatters noisily into a lifeless heap."))
    ((or (is-ghost ch)
         (is-shadow ch)
         (is-wraith ch)
         (is-spectre ch))
     (act ch :all-emit "$n vanishes into the void with a terrible shriek."))
    ((is-vampire ch)
     (act ch :all-emit "$n screams as $e is consumed in a blazing fire!"))
    ((is-lich ch)
     (act ch :all-emit "A roar fills your ears as $n is ripped into the void!"))
    ((is-undead ch)
     (act ch :all-emit "Your skin crawls as you hear $n's final shriek."))
    (t
     (let ((bloodlust nil))
       (dolist (tch (people-of (in-room-of ch)))
         (cond
           ((and (not bloodlust)
                 (is-barb tch)
                 (zerop (random 2)))
            (setf bloodlust t)
            (act tch :target ch :subject-emit "You feel a rising bloodlust as you hear $n's death cry."))
           (t
            (act tch :target ch :subject-emit "Your blood freezes as you hear $N's death cry.")))))))

  (dotimes (dir +num-of-dirs+)
    (when (and (can-go ch dir)
               (exit ch dir)
               (plusp (to-room-of (exit ch dir)))
               (not (eql (exit ch dir) (in-room-of ch))))
      (let ((adjoining-room (real-room (to-room-of (exit ch dir)))))
        (send-to-room adjoining-room
                      "Your blood freezes as you hear someone's death cry from ~a."
                      (aref +from-dirs+ dir))
        (when (eql (in-room-of ch) (abs-exit adjoining-room (aref +rev-dir+ dir)))
          (dolist (tch (copy-list (people-of adjoining-room)))
            (when (and (is-npc tch)
                       (not (mob-flagged tch +mob-sentinel+))
                       (null (fighting-of tch))
                       (awakep tch)
                       (mob-flagged tch +mob-helper+)
                       (< (random-range 0 40) (level-of tch))
                       (or (not (room-flagged (in-room-of ch) +room-flame-filled+))
                           (char-withstands-fire tch))
                       (or (not (room-flagged (in-room-of ch) +room-ice-cold+))
                           (char-withstands-cold tch))
                       (can-see-room tch (in-room-of ch))
                       (zerop (random 3)))
              (do-simple-move tch (aref +rev-dir+ dir) :rush t))))))))
