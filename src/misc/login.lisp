(in-package #:tempus)

(defun show-pc-race-menu (link)
  (let ((cl (1+ (char-class-of (actor-of link)))))
    (dotimes (i +num-pc-races+)
      (unless (eql (aref +race-restrictions+ i cl) 2)
        (let ((lcl (aref +race-restrictions+ i 0)))
          (cond
            ((eql lcl +race-human+)
             (cxn-write link "                    &gHuman&n     --  Homo Sapiens~%"))
            ((eql lcl +race-elf+)
             (cxn-write link "                    &gElf&n     --  Ancient Woodland Race~%"))
            ((eql lcl +race-dwarf+)
             (cxn-write link "                    &gDwarf&n     --  Short, Bearded, Strong~%"))
            ((eql lcl +race-half-orc+)
             (cxn-write link "                    &gHalf Orc&n  --  Mean, Ugly Bastards~%"))
            ((eql lcl +race-halfling+)
             (cxn-write link "                    &gHalfling&n  --  Nimble Hole-dwellers~%"))
            ((eql lcl +race-tabaxi+)
             (cxn-write link "                    &gTabaxi&n    --  Lithe Cat-person~%"))
            ((eql lcl +race-drow+)
             (cxn-write link "                    &gDrow&n      --  Black-hearted dark elves~%"))
            ((eql lcl +race-minotaur+)
             (cxn-write link "                    &gMinotaur&n  --  Powerful Bull-man~%"))
            ((eql lcl +race-orc+)
             (cxn-write link "                    &gOrc&n       --  Full blooded monsters~%"))))))))

(defun parse-pc-race (arg)
  (position arg +player-races+ :test #'string-equal))