(in-package #:tempus.tests)

(in-suite (defsuite (tempus.random :in test)))

(deftest random-range ()
  (let ((a (random 100))
        (b (random 100)))
    (let ((min (min a b))
          (max (max a b)))
      (is (<= min (tempus::random-range min max) max))
      (is (= a (tempus::random-range a a))))))

(deftest dice ()
  (let ((num (random 100))
        (size (random 100)))
    (is (= (tempus::dice (- num) size) 0))
    (is (= (tempus::dice num (- size)) 0))
    (is (= (tempus::dice 0 size) 0))
    (is (= (tempus::dice num 0) 0))
    (let ((result (tempus::dice num size)))
      (is (<= num result (* num size))))))

(deftest rand-value ()
  (let* ((variance (random 100))
         (a (random 100))
         (b (random 100))
         (c (random 100))
         (min (min a b c))
         (max (max a b c))
         (val (cond
                ((and (= min a) (= max b)) c)
                ((and (= min b) (= max a)) c)
                ((and (= min a) (= max c)) b)
                ((and (= min b) (= max c)) b)
                (t                         a)))
         (result (tempus::rand-value val variance min max)))
    (is (<= (abs (- result val)) variance))
    (is (<= min val max))))