(in-package #:tempus.tests)

(in-suite (defsuite (tempus.wizard :in test)))

(deftest echo/normal/displays-to-room ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player)
                  (chuck mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 51)
    (setf (tempus::level-of bob) 49)
    (setf (tempus::level-of chuck) 52)
    (tempus::interpret-command alice "echo testing")
    (char-output-is alice "Testing~%")
    (char-output-is bob "Testing~%")
    (char-output-is chuck "[Alice] testing~%")))

(deftest send/normal/sends-to-char ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (tempus::interpret-command alice "send .bob testing")
    (char-output-is alice "You send 'testing' to Bob.~%")
    (char-output-is bob "Testing~%")))

(deftest at/normal/performs-command-in-target-room ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (tempus::char-from-room alice t)
    (tempus::char-to-room alice (tempus::real-room 101))
    (tempus::interpret-command alice "at 100 say hi")
    (char-output-is alice "&BYou say, &c'hi'&n~%")
    (char-output-is bob "&BAlice says, &c'hi'&n~%")))

(deftest goto/numeric-target/changes-room ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (tempus::char-from-room alice t)
    (tempus::char-to-room alice (tempus::real-room 101))
    (tempus::interpret-command alice "goto 100")
    (is (= 100 (tempus::number-of (tempus::in-room-of alice))))
    (char-output-is bob "Alice appears with an ear-splitting bang.~%")))

(deftest goto/char-target/changes-room ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (tempus::char-from-room alice t)
    (tempus::char-to-room alice (tempus::real-room 101))
    (tempus::interpret-command alice "goto .bob")
    (is (= 100 (tempus::number-of (tempus::in-room-of alice))))
    (char-output-is bob "Alice appears with an ear-splitting bang.~%")))

(deftest goto/following-imm/imm-in-same-room ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (setf (tempus::level-of bob) 51)
    (tempus::add-follower bob alice)
    (clear-mock-buffers bob alice)
    (tempus::interpret-command alice "goto 101")
    (is (= 101 (tempus::number-of (tempus::in-room-of alice))))
    (is (= 101 (tempus::number-of (tempus::in-room-of bob))))
    (char-output-has alice "Bob appears with an ear-splitting bang.~%")
    (char-output-has bob "Alice disappears in a puff of smoke.~%")))

(deftest distance/valid-rooms/returns-distance ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (tempus::char-from-room alice nil)
    (tempus::char-to-room alice (tempus::real-room 3002) nil)
    (tempus::interpret-command alice "distance 24800")
    (char-output-is alice "Room 24800 is 36 steps away.~%")))

(deftest distance/no-connection/returns-error ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (tempus::interpret-command alice "distance 43000")
    (char-output-is alice "There is no valid path to room 43000.~%")))

(deftest transport/normal/moves-target ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (tempus::char-from-room alice t)
    (tempus::char-to-room alice (tempus::real-room 101))
    (with-captured-log log
        (tempus::do-transport-targets alice ".bob")
      (is (= 101 (tempus::number-of (tempus::in-room-of bob))))
      (char-output-is alice "Bob arrives from a puff of smoke.~%")
      (char-output-is bob "Alice has transported you!~%")
      (is (search "Alice has transported Bob" log)))))

(deftest transport/no-such-target/error-message ()
  (with-fixtures ((alice mock-player))
    (tempus::do-transport-targets alice ".zyzygy")
    (char-output-is alice "You can't detect any '.zyzygy'~%")))

(deftest teleport/normal/moves-target ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (with-captured-log log
        (tempus::do-teleport-name-to-target alice ".bob" "101")
      (is (= 101 (tempus::number-of (tempus::in-room-of bob))))
      (char-output-is alice "Okay.~%Bob disappears in a puff of smoke.~%")
      (char-output-has bob "Alice has teleported you!~%")
      (is (search "Alice has teleported Bob" log)))))

(deftest vnum-mob/normal/lists-mobs ()
  (with-fixtures ((alice mock-player))
    (tempus::do-vnum-mobiles-name alice "puff dragon")
    (char-output-is alice "  1. &g[&n    1&g] &yPuff&n~%")))

(deftest vnum-mob/not-found/error-message ()
  (with-fixtures ((alice mock-player))
    (tempus::do-vnum-mobiles-name alice "zyzygy")
    (char-output-is alice "No mobiles by that name.~%")))

(deftest vnum-obj/normal/lists-objs ()
  (with-fixtures ((alice mock-player))
    (tempus::do-vnum-objects-name alice "mixed potion")
    (is (equal "  1. &g[&n   15&g] &ga mixed potion&n~%"
                (char-output alice)))))

(deftest vnum-obj/not-found/error-message ()
  (with-fixtures ((alice mock-player))
    (tempus::do-vnum-objects-name alice "zyzygy")
    (char-output-is alice "No objects by that name.~%")))

(deftest stat-zone/normal/returns-zone-info ()
  (with-fixtures ((alice mock-player))
    (tempus::do-stat-zone alice)
    (char-output-has alice "Zone #&y1: &cCoder Test Zone&n~%")))

(deftest do-stat-trails/no-trails/returns-error ()
  (with-fixtures ((alice mock-player))
    (tempus::do-stat-trails alice)
    (char-output-is alice "No trails exist within this room.~%")))

(deftest do-stat-trails/normal/displays-no-NIL ()
  (with-fixtures ((alice mock-player))
    ;; add some trails
    (unwind-protect
         (progn
           (push (make-instance 'tempus::room-trail-data
                                :name "Alice"
                                :aliases "alice .alice"
                                :idnum 2
                                :time (local-time:timestamp- (local-time:now)
                                                             35 :sec)
                                :from-dir 1
                                :to-dir 2
                                :track 60
                                :flags 0)
                 (tempus::trail-of (tempus::in-room-of alice)))
           (tempus::do-stat-trails alice)
           (is (null (search "NIL" (char-output alice)))))
      (setf (tempus::trail-of (tempus::in-room-of alice)) nil))))

(deftest force-command ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 51)
    (function-trace-bind ((calls tempus::interpret-command))
        (tempus::interpret-command alice "force bob to inventory")
      (char-output-is alice "You got it.~%")
      (is (= (length calls) 2))
      (is (eql (first (first calls)) bob))
      (is (equal (second (first calls)) "inventory")))))

(deftest do-mload-vnum/normal/loads-mob ()
  (with-fixtures ((alice mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 51)
    (unwind-protect
         (with-captured-log log
             (tempus::interpret-command alice "mload 1201")
           (is (search "(GC) Alice mloaded the Immortal Postmaster[1201] at 100" log))
           (char-output-is alice "You create the Immortal Postmaster.~%")
           (let ((mob (find 1201 (tempus::people-of (tempus::in-room-of alice)) :key 'tempus::vnum-of)))
             (is (not (null mob)))
             (is (= (tempus::vnum-of mob) 1201))))
      (let ((mobs (remove 1201
                          (remove-if-not #'tempus::is-npc (tempus::people-of (tempus::in-room-of alice)))
                          :test-not #'=
                          :key 'tempus::vnum-of)))
        ;; remove created mobs, if any
        (dolist (mob mobs)
          (tempus::extract-creature mob 'tempus::disconnecting))))))

(deftest do-oload-vnum/normal/loads-object ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (unwind-protect
         (with-captured-log log
             (tempus::interpret-command alice "oload 1203")
           (is (search "(GC) Alice oloaded his large coffee mug[1203] at 100" log))
           (char-output-is alice "You create his large coffee mug.~%")
           (let ((obj (find 1203 (tempus::contents-of (tempus::in-room-of alice)) :key 'tempus::vnum-of)))
             (is (not (null obj)))))
      (let ((objs (remove 1203
                          (tempus::contents-of (tempus::in-room-of alice))
                          :test-not #'=
                          :key 'tempus::vnum-of)))
        ;; remove created objects, if any
        (dolist (obj objs)
          (tempus::extract-obj obj))))))

(deftest do-oload-vnum/no-such-object/error-message ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (unwind-protect
         (progn
           (tempus::interpret-command alice "oload 20")
           (char-output-is alice "There is no object thang with that number.~%")
           (is (zerop (count 20 (tempus::contents-of (tempus::in-room-of alice))
                             :key 'tempus::vnum-of))))
      (let ((objs (remove 20
                          (tempus::contents-of (tempus::in-room-of alice))
                          :test-not #'=
                          :key 'tempus::vnum-of)))
        ;; remove created objects, if any
        (dolist (obj objs)
          (tempus::extract-obj obj))))))

(deftest do-oload-count-vnum/normal/loads-count-object ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (unwind-protect
         (let ((count (+ 2 (random 100))))
           (with-captured-log log
               (tempus::interpret-command alice (format nil "oload ~d 1203" count))
             (is (search (format nil "(GC) Alice oloaded his large coffee mug[1203] at 100 (x~d)" count)
                         log))
             (is (equal (format nil "You create his large coffee mug. (x~d)~~%" count)
                        (char-output alice)))
             (is (= count (count 1203 (tempus::contents-of (tempus::in-room-of alice))
                                 :key 'tempus::vnum-of)))))
      (let ((objs (remove 1203
                          (tempus::contents-of (tempus::in-room-of alice))
                          :test-not #'=
                          :key 'tempus::vnum-of)))
        ;; remove created objects, if any
        (dolist (obj objs)
          (tempus::extract-obj obj))))))

(deftest do-oload-count-vnum/count-too-large/error-message ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (unwind-protect
         (progn
           (tempus::interpret-command alice "oload 101 1203")
           (char-output-is alice "You can't possibly need THAT many!~%")
           (is (zerop (count 1203 (tempus::contents-of (tempus::in-room-of alice))
                             :key 'tempus::vnum-of))))
      (let ((objs (remove 1203
                          (tempus::contents-of (tempus::in-room-of alice))
                          :test-not #'=
                          :key 'tempus::vnum-of)))
        ;; remove created objects, if any
        (dolist (obj objs)
          (tempus::extract-obj obj))))))

(deftest perform-pload/single-on-self/loads-object ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (with-captured-log log
        (tempus::perform-pload alice 1203 1 alice)
      (is (search "(GC) Alice ploaded his large coffee mug[1203] onto self at 100" log))
      (char-output-is alice "You create his large coffee mug.~%")
      (char-output-is bob "Alice does something suspicious and alters reality.~%")
      (is (= 1 (count 1203 (tempus::carrying-of alice) :key 'tempus::vnum-of))))))

(deftest perform-pload/multiple-on-self/loads-objects ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (with-captured-log log
        (tempus::perform-pload alice 1203 10 alice)
      (is (search "(GC) Alice ploaded his large coffee mug[1203] onto self at 100 (x10)" log))
      (char-output-is alice "You create his large coffee mug. (x10)~%")
      (char-output-is bob "Alice does something suspicious and alters reality.~%")
      (is (= 10 (count 1203 (tempus::carrying-of alice) :key 'tempus::vnum-of))))))

(deftest perform-pload/single-on-other/loads-object ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player)
                  (eva mock-player))
    (setf (override-security-p alice) t)
    (with-captured-log log
        (tempus::perform-pload alice 1203 1 bob)
      ;; hackily skip the mock player id
      (is (search "(GC) Alice ploaded his large coffee mug[1203] onto PC Bob[" log))
      (is (search "] at 100" log))
      (char-output-is alice "You load his large coffee mug onto Bob.~%")
      (char-output-is bob "Alice causes his large coffee mug to appear in your hands.~%")
      (char-output-is eva "Alice does something suspicious and alters reality.~%")
      (is (= 1 (count 1203 (tempus::carrying-of bob) :key 'tempus::vnum-of))))))

(deftest perform-pload/multiple-on-other/loads-objects ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player)
                  (eva mock-player))
    (setf (override-security-p alice) t)
    (with-captured-log log
        (tempus::perform-pload alice 1203 10 bob)
      ;; hackily skip the mock player id
      (is (search "(GC) Alice ploaded his large coffee mug[1203] onto PC Bob[" log))
      (is (search "] at 100 (x10)" log))
      (char-output-is alice "You load his large coffee mug onto Bob. (x10)~%")
      (char-output-is bob "Alice causes his large coffee mug to appear in your hands. (x10)~%")
      (char-output-is eva "Alice does something suspicious and alters reality.~%")
      (is (= 10 (count 1203 (tempus::carrying-of bob) :key 'tempus::vnum-of))))))

(deftest do-pload-vnum/normal/calls-perform-pload ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (with-captured-log log
        (function-trace-bind ((calls tempus::perform-pload))
            (tempus::interpret-command alice "pload 1203")
          (is (equal `((,alice 1203 1 ,alice)) calls))))))

(deftest do-pload-arg1-arg2/with-count-and-vnum/calls-perform-pload ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (with-captured-log log
        (function-trace-bind ((calls tempus::perform-pload))
            (tempus::interpret-command alice "pload 10 1203")
          (is (equal `((,alice 1203 10 ,alice)) calls))))))

(deftest do-pload-arg1-arg2/with-vnum-and-target/calls-perform-pload ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (with-captured-log log
        (function-trace-bind ((calls tempus::perform-pload))
            (tempus::interpret-command alice "pload 1203 bob")
          (is (equal `((,alice 1203 1 ,bob)) calls))))))

(deftest do-pload-count-vnum-target/normal/calls-perform-pload ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (with-captured-log log
        (function-trace-bind ((calls tempus::perform-pload))
            (tempus::interpret-command alice "pload 10 1203 bob")
          (is (equal `((,alice 1203 10 ,bob)) calls))))))

(deftest gain-exp-regardless/normal/gains-exp ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 10)
    (setf (tempus::exp-of alice) (aref tempus::+exp-scale+ 10))
    (with-captured-log log
        (tempus::gain-exp-regardless alice 500)
      (char-output-is alice "")
      (is (= (tempus::level-of alice) 10))
      (is (= (tempus::exp-of alice) (+ 500 (aref tempus::+exp-scale+ 10))))
      (is (equal "" log)))))

(deftest gain-exp-regardless/enough-for-level/gains-exp-and-level ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 10)
    (setf (tempus::exp-of alice) (aref tempus::+exp-scale+ 10))
    (with-captured-log log
        (tempus::gain-exp-regardless alice (- (aref tempus::+exp-scale+ 11)
                                              (aref tempus::+exp-scale+ 10)))
      (char-output-is alice "You rise a level!~%")
      (is (= (tempus::level-of alice) 11))
      (is (= (tempus::exp-of alice) (aref tempus::+exp-scale+ 11)))
      (is (search "Alice advanced to level 11" log)))))

(deftest do-advance/target-level-larger/target-gains-exp ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 72)
    (with-captured-log log
        (function-trace-bind ((calls tempus::gain-exp-regardless))
            (tempus::interpret-command alice "advance bob 10")
          (is (equal `((,bob ,(aref tempus::+exp-scale+ 10))) calls)))
      (char-output-has alice "You got it.~%")
      (char-output-has bob "Alice makes some strange gestures.~%")
      (char-output-has bob "You rise 9 levels!~%")
      (is (search "(GC) Alice has advanced Bob to level 10 (from 1)" log)))))

(deftest do-advance/target-level-smaller/target-loses-exp ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 72)
    (setf (tempus::level-of bob) 49)
    (with-captured-log log
        (function-trace-bind ((calls tempus::gain-exp-regardless))
            (tempus::interpret-command alice "advance bob 10")
          (is (equal `((,bob ,(1- (aref tempus::+exp-scale+ 10)))) calls)))
      (is (= (tempus::level-of bob) 10))
      (char-output-has alice "You got it.~%")
      (char-output-is bob "")
      (is (search "(GC) Alice has advanced Bob to level 10 (from 49)" log)))))

(deftest do-restore-target/normal/target-is-restored ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 72)
    (with-captured-log log
        (function-trace-bind ((calls tempus::restore-creature))
            (tempus::interpret-command alice "restore bob")
          (is (equal `((,bob)) calls)))
      (char-output-has alice "You got it.~%")
      (char-output-is bob "You have been fully healed by Alice!~%")
      (is (search "Bob has been restored by Alice" log)))))

(deftest perform-vis/already-visible/already-vis-message ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 72)
    (tempus::perform-vis alice)
    (char-output-is alice "You are already fully visible.~%")))

(deftest perform-vis/other-cant-see/other-gets-message ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 72)
    (setf (tempus::invis-level-of alice) 72)
    (tempus::perform-vis alice)
    (char-output-is alice "You are now fully visible.~%")
    (char-output-is bob "You suddenly realize that Alice is standing beside you.~%")))

(deftest perform-vis/other-can-see/other-gets-no-message ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 72)
    (setf (tempus::level-of bob) 50)
    (setf (tempus::invis-level-of alice) 50)
    (tempus::perform-vis alice)
    (char-output-is alice "You are now fully visible.~%")
    (char-output-is bob "")))

(deftest perform-invis/ch-is-npc/no-effect ()
  (with-fixtures ((mallory mock-mobile))
    ;; this should error if unhandled, since mobiles have no
    ;; invis-level slot
    (finishes (tempus::perform-invis mallory (tempus::level-of mallory)))))

(deftest perform-invis/ch-turns-invis/ch-is-invis ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 72)
    (setf (tempus::invis-level-of alice) 0)
    (tempus::perform-invis alice (tempus::level-of alice))
    (is (= (tempus::invis-level-of alice) (tempus::level-of alice)))
    (char-output-is alice "Your invisibility level is 72.~%")))

(deftest perform-invis/other-can-see/other-gets-message ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 72)
    (setf (tempus::invis-level-of alice) 0)
    (tempus::perform-invis alice (tempus::level-of alice))
    (is (equal "You blink and suddenly realize that Alice is gone.~%"
               (char-output bob)))))

(deftest perform-invis/other-cant-see/other-gets-no-message ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 72)
    (setf (tempus::invis-level-of alice) 51)
    (setf (tempus::level-of bob) 50)
    (tempus::perform-invis alice (tempus::level-of alice))
    (char-output-is bob "")))

(deftest perform-invis/other-can-now-see/other-gets-message ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 72)
    (setf (tempus::invis-level-of alice) 51)
    (setf (tempus::level-of bob) 50)
    (tempus::perform-invis alice 40)
    (is (equal "You suddenly realize that Alice is standing beside you.~%"
               (char-output bob)))))

(deftest do-invis/ch-is-npc/error-message ()
  (with-fixtures ((mallory mock-mobile))
    (setf (tempus::level-of mallory) 51)
    (tempus::interpret-command mallory "invis")
    (char-output-is mallory "You can't do that!~%")))

(deftest do-invis/no-arg-visible/ch-is-max-invis ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 72)
    (function-trace-bind ((calls tempus::perform-invis))
        (tempus::interpret-command alice "invis")
      (is (equal `((,alice 72)) calls)))))

(deftest do-invis/no-arg-invisible/ch-is-vis ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 72)
    (setf (tempus::invis-level-of alice) 72)
    (function-trace-bind ((calls tempus::perform-vis))
        (tempus::interpret-command alice "invis")
      (is (equal `((,alice)) calls)))))

(deftest do-invis/one-arg-over-level/error-message ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 50)
    (tempus::interpret-command alice "invis 70")
    (char-output-is alice "You can't go invisible above your own level.~%")
    (is (zerop (tempus::invis-level-of alice)))))

(deftest do-invis/one-arg-is-zero/ch-is-vis ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 50)
    (setf (tempus::invis-level-of alice) 50)
    (function-trace-bind ((calls tempus::perform-vis))
        (tempus::interpret-command alice "invis 0")
      (is (equal `((,alice)) calls)))
    (is (zerop (tempus::invis-level-of alice)))))

(deftest do-invis/one-arg-under-level/ch-is-invis ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 72)
    (function-trace-bind ((calls tempus::perform-invis))
        (tempus::interpret-command alice "invis 60")
      (is (equal `((,alice 60)) calls)))
    (is (= 60 (tempus::invis-level-of alice)))))

(deftest do-gecho/no-arg/error-message ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (tempus::interpret-command alice "gecho")
    (char-output-is alice "That must be a mistake...~%")))

(deftest do-gecho/with-arg/message-sent-to-all ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player)
                  (ike mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (setf (tempus::level-of ike) 60)
    (tempus::interpret-command alice "gecho Testing")
    (char-output-is alice "Testing~%")
    (char-output-is bob "Testing~%")
    (char-output-is ike "[Alice-g] Testing~%")))

(deftest do-dc-num-str/normal/target-disconnected ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 50)
    (with-captured-log log
        (tempus::interpret-command alice (format nil "dc ~d"
                                                 (tempus::cxn-fd
                                                  (tempus::link-of bob))))
      (is (search "(GC) Connection closed by Alice" log)))
    (is (equal (format nil "Connection #~d closed.~~%"
                       (tempus::cxn-fd (tempus::link-of bob)))
               (char-output alice)))
    (is (eql 'tempus::disconnecting (tempus::state-of (tempus::link-of bob))))))

(deftest do-last/no-args/error-message ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 72)
    (finishes (tempus::interpret-command alice "last"))
    (char-output-is alice "For whom do you wish to search?~%")))

(deftest do-last-playername/lower-level/returns-last ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 70)
    (finishes (tempus::interpret-command alice "last azimuth"))
    (is (equal "You are not sufficiently godly for that!~%"
               (char-output alice)))))

(deftest do-last-playername/normal/returns-last ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 72)
    (finishes (tempus::interpret-command alice "last azimuth"))
    (char-output-has alice "Azimuth")))

(deftest do-zreset/no-arg/error-message ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (tempus::interpret-command alice "zreset")
    (char-output-is alice "You must specify a zone.~%")))

(deftest do-zreset/star-arg/reset-whole-world ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (function-trace-bind ((calls tempus::reset-zone))
        (with-captured-log log
            (tempus::interpret-command alice "zreset *")
          (is (search "(GC) Alice reset entire world" log)))
      (is (= (length calls) (length tempus::*zone-table*))))
    (is (equal "You feel a strangely refreshing breeze.~%Reset world.~%"
               (char-output alice)))))

(deftest do-zreset/dot-arg/reset-current-zone ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (function-trace-bind ((calls tempus::reset-zone))
        (with-captured-log log
            (tempus::interpret-command alice "zreset .")
          (is (search "(GC) Alice reset zone 1" log)))
      (is (equal `((,(tempus::zone-of (tempus::in-room-of alice)))) calls)))
    (is (equal "You feel a strangely refreshing breeze.~%Reset zone 1 : Coder Test Zone~%"
               (char-output alice)))))

(deftest do-zreset/numeric-arg/reset-specific-zone ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (function-trace-bind ((calls tempus::reset-zone))
        (with-captured-log log
            (tempus::interpret-command alice "zreset 0")
          (is (search "(GC) Alice reset zone 0" log)))
      (is (equal `((,(tempus::real-zone 0))) calls)))
    (char-output-is alice "Reset zone 0 : Limbo~%")))

(deftest do-unaffect/normal/unaffects-target ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (tempus::affect-to-char bob (make-instance 'tempus::affected-type
                                               :location tempus::+apply-str+
                                               :modifier -2
                                               :duration 3
                                               :bitvector 0
                                               :kind tempus::+spell-poison+
                                               :level 30
                                               :owner 0))

    (with-captured-log log
        (function-trace-bind ((calls tempus::perform-unaffect))
            (tempus::interpret-command alice "unaffect bob")
          (is (equal `((,alice ,bob)) calls)))
      (char-output-is alice "All spells removed.~%")
      (char-output-is bob "There is a brief flash of light!~%You feel slightly different.~%"))))

(deftest do-reroll/normal/target-rerolled ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (with-captured-log log
        (function-trace-bind ((calls tempus::perform-reroll))
            (tempus::interpret-command alice "reroll bob")
          (is (equal `((,alice ,bob)) calls)))
      (char-output-has alice "New stats:")
      (char-output-is bob "Your stats have been rerolled.~%")
      (is (search "Alice has rerolled Bob" log)))))

(deftest do-notitle/notitle-off/target-notitle-on ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (with-captured-log log
        (tempus::interpret-command alice "notitle bob")
      (is (tempus::plr-flagged bob tempus::+plr-notitle+))
      (char-output-is alice "Notitle turned ON for Bob.~%")
      (is (search "Alice turned notitle ON for Bob" log)))))

(deftest do-notitle/notitle-on/target-notitle-off ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (setf (tempus::plr-bits-of bob) (logior (tempus::plr-bits-of bob)
                                            tempus::+plr-notitle+))
    (with-captured-log log
        (tempus::interpret-command alice "notitle bob")
      (is (not (tempus::plr-flagged bob tempus::+plr-notitle+)))
      (char-output-is alice "Notitle turned OFF for Bob.~%")
      (is (search "Alice turned notitle OFF for Bob" log)))))

(deftest do-nopost/nopost-off/target-nopost-on ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (with-captured-log log
        (tempus::interpret-command alice "nopost bob")
      (is (tempus::plr-flagged bob tempus::+plr-nopost+))
      (char-output-is alice "Nopost turned ON for Bob.~%")
      (is (search "Alice turned nopost ON for Bob" log)))))

(deftest do-squelch/squelch-off/target-squelch-on ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (with-captured-log log
        (tempus::interpret-command alice "squelch bob")
      (is (tempus::plr-flagged bob tempus::+plr-noshout+))
      (char-output-is alice "Squelch turned ON for Bob.~%")
      (is (search "Alice turned squelch ON for Bob" log)))))

(deftest perform-freeze/one-day/freezes-char-one-day ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::level-of alice) 60)
    (with-captured-log log
        (tempus::perform-freeze alice bob "1d")
      (char-output-has alice "Bob has been frozen for 1 day~%")
      (char-output-is bob "A bitter wind suddenly rises and drains every erg of heat from your body!~%You feel frozen!~%")
      (is (search "Alice has frozen Bob for 1 day" log))
      (is (tempus::plr-flagged bob tempus::+plr-frozen+))
      (is (not (null (tempus::thaw-time-of bob))))
      (is (= (tempus::freezer-id-of bob) (tempus::idnum-of alice)))
      (is (= (tempus::freeze-level-of bob) (tempus::level-of alice))))))

(deftest perform-thaw/normal/thaws-char ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (setf (tempus::plr-bits-of bob) (logior (tempus::plr-bits-of bob)
                                            tempus::+plr-frozen+))
    (setf (tempus::freeze-level-of bob) 55)
    (setf (tempus::level-of alice) 60)
    (with-captured-log log
        (tempus::perform-thaw alice bob)
      (char-output-has alice "Thawed.~%")
      (char-output-has bob "You feel thawed.~%")
      (is (search "Alice has un-frozen Bob" log))
      (is (not (tempus::plr-flagged bob tempus::+plr-frozen+))))))

(deftest do-users/normal/lists-users ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (override-security-p alice) t)
    (tempus::interpret-command alice "users")
    (char-output-has alice "Alice")
    (char-output-has alice "playing")
    (char-output-has alice "2 visible sockets connected.~%")))

(deftest do-badge/blank-badge/sets-badge-blank ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (setf (tempus::badge-of alice) "FOO")
    (tempus::interpret-command alice "badge")
    (is (equal "" (tempus::badge-of alice)))
    (char-output-is alice "Okay, you've got a blank badge now.~%")))

(deftest do-badge/non-blank-badge/sets-badge ()
  (with-fixtures ((alice mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (setf (tempus::badge-of alice) "FOO")
    (tempus::interpret-command alice "badge bar")
    (is (equal "BAR" (tempus::badge-of alice)))
    (char-output-is alice "Okay, your badge is now BAR.~%")))

(deftest do-tester/no-arg/lists-options ()
  (with-fixtures ((alice mock-player))
    (setf (override-security-p alice) t)
    (tempus::interpret-command alice "tester")
    (char-output-has alice "Options are:~%")))

(deftest do-tester-advance/normal/sets-up-tester-level ()
  (with-fixtures ((alice mock-player))
    (setf (override-security-p alice) t)
    (with-captured-log log
        (tempus::interpret-command alice "tester advance 10")
      (char-output-is alice "Your body vibrates for a moment... You feel different!~%You rise 9 levels!~%")
      (is (= 10 (tempus::level-of alice))))))

(deftest do-tester-unaffect/normal/unaffects-tester ()
  (with-fixtures ((alice mock-player))
    (setf (override-security-p alice) t)
    (function-trace-bind ((calls tempus::perform-unaffect))
        (tempus::interpret-command alice "tester unaffect")
      (is (equal `((,alice ,alice)) calls)))))

(deftest do-tester-reroll/normal/rerolls-tester ()
  (with-fixtures ((alice mock-player))
    (setf (override-security-p alice) t)
    (with-captured-log log
        (function-trace-bind ((calls tempus::perform-reroll))
            (tempus::interpret-command alice "tester reroll")
          (is (equal `((,alice ,alice)) calls))))))

(deftest do-tester-stat/normal/runs-stat ()
  (with-fixtures ((alice mock-player))
    (setf (override-security-p alice) t)
    (function-trace-bind ((calls tempus::perform-stat))
        (tempus::interpret-command alice "tester stat holy")
      (is (equal `((,alice "holy")) calls)))))

(deftest do-tester-goto/normal/runs-goto ()
  (with-fixtures ((alice mock-player))
    (setf (override-security-p alice) t)
    (function-trace-bind ((calls tempus::perform-goto))
        (tempus::interpret-command alice "tester goto 3013")
      (is (equal `((,alice ,(tempus::real-room 3013) t)) calls)))))

(deftest do-tester-goto/normal/restores-self ()
  (with-fixtures ((alice mock-player))
    (setf (override-security-p alice) t)
    (function-trace-bind ((calls tempus::restore-creature))
        (tempus::interpret-command alice "tester restore")
      (is (equal `((,alice)) calls)))))

(deftest do-tester-setters/normal/sets-right-things ()
  (with-fixtures ((alice mock-player))
    (setf (override-security-p alice) t)
    (let ((test-cases '(("align" tempus::alignment-of -500)
                        ("gen" tempus::remort-gen-of 10)
                        ("maxhit" tempus::max-hitp-of 142)
                        ("maxmana" tempus::max-mana-of 213)
                        ("maxmove" tempus::max-move-of 347)
                        ("str" tempus::str-of 23)
                        ("int" tempus::int-of 22)
                        ("wis" tempus::wis-of 21)
                        ("dex" tempus::dex-of 20)
                        ("con" tempus::con-of 19)
                        ("cha" tempus::cha-of 18))))
      (dolist (test-case test-cases)
        (tempus::interpret-command alice (format nil "tester ~a ~d"
                                                 (first test-case)
                                                 (third test-case)))
        (is (= (funcall (second test-case) alice) (third test-case)))))))

(deftest do-tester-gen/normal/sets-gen ()
  (with-fixtures ((alice mock-player))
    (setf (override-security-p alice) t)
    (tempus::interpret-command alice "tester gen 10")
    (is (= (tempus::remort-gen-of alice) 10))))

(deftest do-tester/bad-command/error-message ()
  (with-fixtures ((alice mock-player))
    (setf (override-security-p alice) t)
    (tempus::interpret-command alice "tester badcmd")
    (char-output-is alice "Invalid tester command: badcmd~%")))

(deftest do-severtell/normal/tell-is-severed ()
  (with-fixtures ((alice mock-player)
                  (bob mock-player))
    (setf (tempus::level-of alice) 51)
    (setf (override-security-p alice) t)
    (setf (tempus::last-tell-from-of bob) (tempus::idnum-of alice))
    (setf (tempus::last-tell-to-of bob) (tempus::idnum-of alice))
    (tempus::interpret-command alice "severtell bob")
    (char-output-is alice "Reply severed.~%")
    (is (null (tempus::last-tell-from-of bob)))
    (is (null (tempus::last-tell-to-of bob)))))

(deftest do-jet-stream/jet-stream-enabled/disable-jet-stream ()
  (let ((tempus::*jet-stream-state* t))
    (with-fixtures ((alice mock-player :level 51 :override-security t))
      (with-captured-log log
          (tempus::interpret-command alice "jet_stream")
        (is (search "Alice has toggled jet_stream_state OFF" log))
        (char-output-is alice "Alice has toggled jet_stream_state OFF~%")
        (is (null tempus::*jet-stream-state*))))))

(deftest do-jet-stream/jet-stream-disabled/enable-jet-stream ()
  (let ((tempus::*jet-stream-state* nil))
    (with-fixtures ((alice mock-player :level 51 :override-security t))
      (with-captured-log log
          (tempus::interpret-command alice "jet_stream")
        (is (search "Alice has toggled jet_stream_state ON" log))
        (char-output-is alice "Alice has toggled jet_stream_state ON~%")
        (is (not (null tempus::*jet-stream-state*)))))))