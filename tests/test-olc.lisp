(in-package #:tempus.tests)

(in-suite (defsuite (tempus.olc :in test)))

(defmacro with-room-olc-fixture ((player room) &body body)
  `(with-mock-players (,player)
     (with-mock-rooms (,room)
       (tempus::char-from-room ,player nil)
       (tempus::char-to-room ,player ,room nil)
      (setf (override-security-p ,player) t)
      (setf (tempus::level-of ,player) 51)
      (setf (tempus::owner-idnum-of (tempus::zone-of (tempus::in-room-of alice))) (tempus::idnum-of ,player))
      ,@body)))

(deftest perform-create-and-destroy-room/creates-and-destroys-room ()
  (with-mock-players (alice)
    (setf (tempus::owner-idnum-of (tempus::zone-of (tempus::in-room-of alice))) (tempus::idnum-of alice))
    (tempus::perform-create-room alice (tempus::zone-containing-number 102) 102)
    (char-output-is alice "Room 102 successfully created.~%")
    (clear-mock-buffers alice)
    (let ((room (gethash 102 tempus::*rooms*)))
      (is (not (null room)))
      (is (find room (tempus::world-of (tempus::zone-of room))))
      (when room
        (tempus::perform-destroy-room alice room)
        (char-output-is alice "Room eliminated.~%")
        (is (null (gethash 102 tempus::*rooms*)))
        (is (null (find room (tempus::world-of (tempus::zone-of room)))))))))

(deftest perform-clear-room/clears-room ()
  (with-room-olc-fixture (alice test-room)
    (tempus::perform-clear-room alice test-room)
    (char-output-is alice "Room fully cleared.~%")
    (is (string= "A Blank Room" (tempus::name-of test-room)))
    (is (null (or
               (tempus::description-of test-room)
               (tempus::sounds-of test-room)
               (tempus::prog-text-of test-room)
               (tempus::prog-obj-of test-room)
               (tempus::prog-marker-of test-room)
               (tempus::prog-state-of test-room)
               (tempus::ex-description-of test-room)
               (tempus::searches-of test-room)
               (tempus::affects-of test-room)
               (tempus::trail-of test-room)
               (tempus::flow-dir-of test-room)
               (tempus::flow-speed-of test-room)
               (tempus::flow-kind-of test-room)
               (tempus::func-of test-room)
               (tempus::func-param-of test-room)
               (tempus::max-occupancy-of test-room))))
    (is (zerop (tempus::flags-of test-room)))
    (is (zerop (tempus::find-path-index-of test-room)))
    (is (zerop (tempus::light-of test-room)))))

(deftest do-rset-title/enters-editor ()
  (with-room-olc-fixture (alice test-room)
    (tempus::interpret-command alice "olc rset description")
    (is (eql (tempus::state-of (tempus::link-of alice)) 'tempus::editing))))

(deftest do-rset-sector/sets-sector ()
  (with-room-olc-fixture (alice test-room)
    (tempus::interpret-command alice "olc rset sector road")
    (char-output-is alice "Room sector type set to Road.~%")
    (is (= (tempus::terrain-of test-room) tempus::+sect-road+))))

(deftest do-rset-flags/using-plus/adds-room-flags ()
  (with-room-olc-fixture (alice test-room)
    (tempus::interpret-command alice "olc rset flags + dark indoor")
    (char-output-is alice "Flag dark set on room.~%Flag indoor set on room.~%")
    (is (= (tempus::flags-of test-room) (logior tempus::+room-dark+ tempus::+room-indoors+)))))

(deftest do-rset-flags/using-minus/removes-room-flags ()
  (with-room-olc-fixture (alice test-room)
    (setf (tempus::flags-of test-room) (logior tempus::+room-dark+ tempus::+room-indoors+))
    (tempus::interpret-command alice "olc rset flags - dark indoor")
    (char-output-is alice "Flag dark unset on room.~%Flag indoor unset on room.~%")
    (is (zerop (tempus::flags-of test-room)))))

(deftest do-rset-sounds-remove/removes-sounds ()
  (with-room-olc-fixture (alice test-room)
    (setf (tempus::sounds-of test-room) "You hear the sounds of testing.~%")
    (tempus::interpret-command alice "olc rset sound remove")
    (char-output-is alice "Sounds removed from room.~%")
    (is (null (tempus::sounds-of test-room)))))

(deftest do-rset-sounds/starts-editor ()
  (with-room-olc-fixture (alice test-room)
    (tempus::interpret-command alice "olc rset sound")
    (is (eql (tempus::state-of (tempus::link-of alice)) 'tempus::editing))))

(deftest do-rset-flow/sets-flow-vars ()
  (with-room-olc-fixture (alice test-room)
    (tempus::interpret-command alice "olc rset flow north 5 wind")
    (char-output-is alice "Flow state set.~%")
    (is (= (tempus::flow-dir-of test-room) tempus::+north+))
    (is (= (tempus::flow-speed-of test-room) 5))
    (is (= (tempus::flow-kind-of test-room) 1))))

(deftest do-rset-flow-remove/clears-flow-vars ()
  (with-room-olc-fixture (alice test-room)
    (tempus::interpret-command alice "olc rset flow remove")
    (char-output-is alice "Flow removed from room.~%")
    (is (zerop (tempus::flow-dir-of test-room)))
    (is (zerop (tempus::flow-speed-of test-room)))
    (is (zerop (tempus::flow-kind-of test-room)))))

(deftest do-rset-occupancy/sets-max-occupancy ()
  (with-room-olc-fixture (alice test-room)
    (tempus::interpret-command alice "olc rset occupancy 15")
    (char-output-is alice "Room occupancy set to 15.~%")
    (is (= (tempus::max-occupancy-of test-room) 15))))

(deftest do-olc-exit-doorflags/with-plus/adds-door-flags ()
  (with-room-olc-fixture (alice test-room)
    (tempus::interpret-command alice "olc exit s doorflags + door closed locked ")
    (char-output-is alice "Flag door set on exit.~%Flag closed set on exit.~%Flag locked set on exit.~%")
    (is (not (null (aref (tempus::dir-option-of test-room) tempus::+south+))))
    (is (= (tempus::exit-info-of (aref (tempus::dir-option-of test-room) tempus::+south+))
           (logior tempus::+door-open+ tempus::+door-closed+ tempus::+door-locked+)))))

(deftest do-olc-exit-doorflags/with-plus/removes-door-flags ()
  (with-room-olc-fixture (alice test-room)
    (setf (aref (tempus::dir-option-of test-room) tempus::+south+)
          (make-instance 'tempus::room-direction-data
                         :exit-info (logior tempus::+door-open+
                                            tempus::+door-closed+
                                            tempus::+door-locked+)))
    (tempus::interpret-command alice "olc exit s doorflags - door closed locked ")
    (char-output-is alice "Flag door unset on exit.~%Flag closed unset on exit.~%Flag locked unset on exit.~%")
    (is (zerop (tempus::exit-info-of (aref (tempus::dir-option-of test-room) tempus::+south+))))))